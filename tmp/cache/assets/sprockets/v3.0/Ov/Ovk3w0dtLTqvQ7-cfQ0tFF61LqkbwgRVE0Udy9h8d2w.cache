I"!(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AuditReports.Models.MeasureSummary = (function(superClass) {
    extend(MeasureSummary, superClass);

    function MeasureSummary() {
      this._listenToChannel = bind(this._listenToChannel, this);
      return MeasureSummary.__super__.constructor.apply(this, arguments);
    }

    MeasureSummary.prototype.relations = [
      {
        type: Backbone.HasMany,
        key: 'field_values',
        relatedModel: 'AuditReports.Models.FieldValue',
        reverseRelation: {
          key: 'measure_summary'
        }
      }
    ];

    MeasureSummary.prototype.defaults = {
      id: '',
      measure_fields: [],
      results: []
    };

    MeasureSummary.prototype.initialize = function() {
      return AuditReports.EventBus.on("channel:measure_summary:" + (this.get('id')), this._listenToChannel);
    };

    MeasureSummary.prototype._listenToChannel = function(args) {
      var data, event;
      event = args[0], data = args[1];
      if (event === 'change') {
        return this.set(data);
      }
    };

    return MeasureSummary;

  })(Backbone.RelationalModel);

  AuditReports.Models.MeasureSummary.setup();

}).call(this);
:ET