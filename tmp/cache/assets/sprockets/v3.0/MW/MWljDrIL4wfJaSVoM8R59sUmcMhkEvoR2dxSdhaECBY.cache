I"Ñ	(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AuditReports.Views.MeasureTab = (function(superClass) {
    extend(MeasureTab, superClass);

    function MeasureTab() {
      return MeasureTab.__super__.constructor.apply(this, arguments);
    }

    MeasureTab.prototype.tagName = 'li';

    MeasureTab.prototype.className = 'js-measure-tab';

    MeasureTab.prototype.template = _.template("<a href='#'>\n  <i class='icon-grippy measures-tabs__grippy'></i>\n  <%= name %>\n</a>");

    MeasureTab.prototype.events = {
      'click': 'onClick',
      'drop': 'onDrop'
    };

    MeasureTab.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      this.listenTo(this.model, 'change:active', this.render);
      this.listenTo(this.model, 'change:enabled', this.render);
      return this.listenTo(this.collection, 'add', this.render);
    };

    MeasureTab.prototype.render = function() {
      this.$el.html(this.template({
        name: this.model.get('name')
      }));
      this.$el.data('index', this.$el.index());
      if (this.model.get('active')) {
        this.$el.addClass('active');
      } else {
        this.$el.removeClass('active');
      }
      if (this.model.get('enabled')) {
        this.$el.removeClass('excluded');
      } else {
        this.$el.addClass('excluded');
      }
      return this.$el;
    };

    MeasureTab.prototype.measureSelectionUrl = function() {
      var id, report_id;
      report_id = this.model.get('report_id');
      id = this.model.get('id');
      return "/calc/audit_reports/" + report_id + "/measure_selections/" + id;
    };

    MeasureTab.prototype.onClick = function(event) {
      event.preventDefault();
      return this.model.collection.setActive(this.model);
    };

    MeasureTab.prototype.onDrop = function(event) {
      return $.ajax({
        method: 'PUT',
        url: this.measureSelectionUrl(),
        data: {
          measure_selection: {
            calculate_order_position: this.$el.index()
          }
        },
        success: function(data) {
          return triggerAuditReportSummary(data);
        }
      });
    };

    return MeasureTab;

  })(Backbone.View);

}).call(this);
:ET