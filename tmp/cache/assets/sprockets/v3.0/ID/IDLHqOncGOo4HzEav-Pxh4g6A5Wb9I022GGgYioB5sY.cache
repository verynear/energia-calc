I"¢(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AuditReports.Views.AuditReportFieldsRow = (function(superClass) {
    extend(AuditReportFieldsRow, superClass);

    function AuditReportFieldsRow() {
      return AuditReportFieldsRow.__super__.constructor.apply(this, arguments);
    }

    AuditReportFieldsRow.prototype.tagName = 'div';

    AuditReportFieldsRow.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      return this.section = options.section, options;
    };

    AuditReportFieldsRow.prototype.render = function() {
      this.$el.append("<h3>" + this.section.title + "</h3>");
      this.section.rows.forEach((function(_this) {
        return function(row) {
          var $row;
          $row = $("<div class='row'></div>");
          row.forEach(function(apiName) {
            var Field, field, fieldValue;
            if (apiName === 'report_name') {
              fieldValue = _this.model.get('audit_report_name_field_value');
              Field = new AuditReports.Views.AuditReportNameField({
                model: fieldValue
              });
            } else {
              fieldValue = _this.model.get('field_values').find(function(item) {
                return item.get('api_name') === apiName;
              });
              field = new AuditReports.Views.AuditReportField({
                model: fieldValue
              });
            }
            return $row.append(field.render());
          });
          return _this.$el.append($row);
        };
      })(this));
      return this.$el;
    };

    return AuditReportFieldsRow;

  })(Backbone.View);

}).call(this);
:ET