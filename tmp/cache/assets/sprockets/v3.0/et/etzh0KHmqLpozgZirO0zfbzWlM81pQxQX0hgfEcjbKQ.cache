I"N(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AuditReports.Models.Structure = (function(superClass) {
    extend(Structure, superClass);

    function Structure() {
      return Structure.__super__.constructor.apply(this, arguments);
    }

    Structure.prototype.relations = [
      {
        type: Backbone.HasMany,
        key: 'field_values',
        relatedModel: 'AuditReports.Models.FieldValue',
        reverseRelation: {
          key: 'calc_structure'
        }
      }, {
        type: Backbone.HasMany,
        key: 'original_structure_field_values',
        relatedModel: 'AuditReports.Models.OriginalStructureFieldValue',
        reverseRelation: {
          key: 'structure'
        }
      }, {
        type: Backbone.HasOne,
        key: 'name_field_value',
        relatedModel: 'AuditReports.Models.NameFieldValue',
        reverseRelation: {
          key: 'structure'
        }
      }, {
        type: Backbone.HasOne,
        key: 'quantity_field_value',
        relatedModel: 'AuditReports.Models.QuantityFieldValue',
        reverseRelation: {
          key: 'structure'
        }
      }
    ];

    Structure.prototype.defaults = {
      name: '',
      field_values: []
    };

    return Structure;

  })(Backbone.RelationalModel);

  AuditReports.Models.Structure.setup();

}).call(this);
:ET