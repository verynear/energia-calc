I"æ(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AuditReports.Views.EffectiveCalcStructureCalcField = (function(superClass) {
    extend(EffectiveCalcStructureCalcField, superClass);

    function EffectiveCalcStructureCalcField() {
      return EffectiveCalcStructureCalcField.__super__.constructor.apply(this, arguments);
    }

    EffectiveCalcStructureCalcField.prototype.className = 'js-effective-calc-structure-calc-field';

    EffectiveCalcStructureCalcField.prototype.template = _.template("<div class=\"fli is-completed\">\n  <label class=\"fli__label\"><%= name %></label>\n  <input type=\"text\"\n         class=\"fli__input\"\n         value=\"<%= value %>\"\n         disabled>\n</div>");

    EffectiveCalcStructureCalcField.prototype.initialize = function(options) {
      this.$el.attr('data-api_name', this.model.get('api_name'));
      this.listenTo(this.model, 'change:effective_value', this.render);
      return this.name = options.name, this.value = options.value, options;
    };

    EffectiveCalcStructureCalcField.prototype.render = function() {
      var html;
      html = this.template({
        name: this._name(),
        value: this.model.get('effective_value')
      });
      this.$el.html(html);
      return this.$el;
    };

    EffectiveCalcStructureCalcField.prototype._name = function() {
      return "Effective " + (this.model.get('name'));
    };

    return EffectiveCalcStructureCalcField;

  })(Backbone.View);

}).call(this);
:ET