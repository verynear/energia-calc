I"Ç	(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AuditReports.Views.QuantityCalcField = (function(superClass) {
    extend(QuantityCalcField, superClass);

    function QuantityCalcField() {
      return QuantityCalcField.__super__.constructor.apply(this, arguments);
    }

    QuantityCalcField.prototype.className = 'col-2 end-row';

    QuantityCalcField.prototype.inputClass = "js-structure-quantity-calc-field";

    QuantityCalcField.prototype.originalTemplate = _.template("<div class=\"fli js-fli\">\n  <label class=\"fli__label\"><%= name %></label>\n  <input data-api-name='<%= apiName %>'\n         type=\"text\"\n         class=\"fli__input js-fli-input\"\n         required\n         <%= pattern %>\n         value=\"<%= value %>\">\n  <span class=\"fli__append js-fli-append\">/<%= nStructures %></span>\n</div>");

    QuantityCalcField.prototype.initialize = function(options) {
      var ref;
      if (options == null) {
        options = {};
      }
      return this.original = (ref = options.original) != null ? ref : true;
    };

    QuantityCalcField.prototype.nStructures = function() {
      return this.model.get('original_value');
    };

    QuantityCalcField.prototype.setDisabled = function() {
      if (this.nStructures() === 1) {
        return this.$fli.addClass('is-disabled');
      }
    };

    QuantityCalcField.prototype.setHtml = function() {
      if (this.original) {
        return this.originalTemplate({
          name: this.model.get('name'),
          apiName: this.model.get('api_name'),
          value: this.model.get('value'),
          nStructures: this.nStructures(),
          pattern: this._validationPattern()
        });
      } else {
        return QuantityCalcField.__super__.setHtml.apply(this, arguments);
      }
    };

    QuantityCalcField.prototype.syncCalcFieldValue = function() {
      return $.ajax({
        method: 'PUT',
        url: "/calc/calc_structures/" + (this.model.get('id')),
        data: {
          structure: {
            quantity: this.$input.val()
          }
        },
        success: this._afterSyncCalcFieldValue
      });
    };

    return QuantityCalcField;

  })(AuditReports.Views.CalcField);

}).call(this);
:ET