I"(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AuditReports.Views.StructureChange = (function(superClass) {
    extend(StructureChange, superClass);

    function StructureChange() {
      return StructureChange.__super__.constructor.apply(this, arguments);
    }

    StructureChange.prototype.events = {
      'click .js-delete-structure-change': 'deleteStructureChange'
    };

    StructureChange.prototype.tagName = 'div';

    StructureChange.prototype.className = 'structure';

    StructureChange.prototype.template = _.template("<div class='structure__change'>\n  <div class='structure__title'>\n    <%= index %> - <%= structureTypeName  %>\n  </div>\n  <a href=\"#\"\n     class=\"structure__change__delete\n            js-delete-structure-change\"\n     data-trigger=\"tooltip\"\n     data-content=\"Delete this structure pair\">\n      <i class=\"icon-close-solid\"></i>\n  </a>\n\n  <div class=\"structure__column\n              structure__column--original\n              js-original-structures-column\">\n    <div class=\"structure__column__title\">\n      Original\n    </div>\n  </div>\n\n  <div class=\"structure__column\n              structure__column--proposed\n              js-proposed-structures-column\">\n    <div class=\"structure__column__title\">\n      Proposed\n    </div>\n  </div>\n</div>");

    StructureChange.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      this.index = options.index;
      this.originalStructureCard = new AuditReports.Views.StructureCard({
        original: true,
        model: this.model.get('original_structure')
      });
      return this.proposedStructureCard = new AuditReports.Views.StructureCard({
        original: false,
        model: this.model.get('proposed_structure')
      });
    };

    StructureChange.prototype.render = function() {
      var html;
      html = this.template({
        index: this.index + 1,
        structureTypeName: this.model.get('structure_type_name')
      });
      this.$el.html(html);
      this.$originalStructuresColumn = this.$('.js-original-structures-column');
      this.$originalStructuresColumn.append(this.originalStructureCard.render());
      this.$proposedStructuresColumn = this.$('.js-proposed-structures-column');
      this.$proposedStructuresColumn.append(this.proposedStructureCard.render());
      return this.$el;
    };

    StructureChange.prototype.deleteStructureChange = function(event) {
      event.preventDefault();
      return $.ajax({
        method: 'DELETE',
        url: this.structureChangeUrl(),
        success: (function(_this) {
          return function(data) {
            _this.model.get('measure_selection').get('structure_changes').remove(_this.model);
            $('.tooltip').hide();
            _this.remove();
            return triggerAuditReportSummary(data);
          };
        })(this)
      });
    };

    StructureChange.prototype.structureChangeUrl = function() {
      var id, measure_selection_id;
      measure_selection_id = this.model.get('measure_selection').get('id');
      id = this.model.get('id');
      return "/calc/measure_selections/" + measure_selection_id + "/structure_changes/" + id;
    };

    return StructureChange;

  })(Backbone.View);

}).call(this);
:ET