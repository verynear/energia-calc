I"D(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AuditReports.Views.ManageMeasuresPage = (function(superClass) {
    extend(ManageMeasuresPage, superClass);

    function ManageMeasuresPage() {
      return ManageMeasuresPage.__super__.constructor.apply(this, arguments);
    }

    ManageMeasuresPage.prototype.events = {
      'click .js-add-measure-link': 'onClickAddMeasureLink'
    };

    ManageMeasuresPage.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      return this.measureModalUrl = options.measureModalUrl, options;
    };

    ManageMeasuresPage.prototype.render = function() {
      var $manageMeasures, manager, totalsBar;
      this.$('.content > .container').html("<div class='js-measures-manager'></div>");
      $manageMeasures = this.$('.js-measures-manager');
      manager = new AuditReports.Views.MeasuresManager({
        model: this.model,
        el: $manageMeasures
      });
      manager.render();
      totalsBar = new AuditReports.Views.TotalsBar({
        model: this.model.get('audit_report_summary')
      });
      this.$('.content').after(totalsBar.render());
      totalsBar.postRender();
      return this.$el;
    };

    ManageMeasuresPage.prototype.onClickAddMeasureLink = function(event) {
      var modal;
      event.preventDefault();
      modal = new AuditReports.Views.AddMeasureModal({
        model: this.model,
        url: this.measureModalUrl
      });
      return modal.render();
    };

    return ManageMeasuresPage;

  })(Backbone.View);

}).call(this);
:ET