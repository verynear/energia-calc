I"‚(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AuditReports.Views.DescriptionCalcField = (function(superClass) {
    extend(DescriptionCalcField, superClass);

    function DescriptionCalcField() {
      return DescriptionCalcField.__super__.constructor.apply(this, arguments);
    }

    DescriptionCalcField.prototype.className = 'col-6';

    DescriptionCalcField.prototype.inputClass = "js-description-calc-field";

    DescriptionCalcField.prototype.template = _.template("<div class=\"fli js-fli\">\n  <div class=\"fli__label\">Description</div>\n  <textarea class=\"fli__input js-fli-input\"><%= value %></textarea>\n</div>");

    DescriptionCalcField.prototype.setHtml = function() {
      return this.template({
        value: this.model.get('description')
      });
    };

    DescriptionCalcField.prototype.syncCalcFieldValue = function() {
      return $.ajax({
        method: 'PUT',
        url: ("/calc/audit_reports/" + (this.model.get('report_id')) + "/") + ("measure_selections/" + (this.model.get('id'))),
        data: {
          measure_selection: {
            description: this.$input.val()
          }
        },
        success: this._afterSyncCalcFieldValue
      });
    };

    DescriptionCalcField.prototype._afterSyncCalcFieldValue = function(data) {};

    return DescriptionCalcField;

  })(AuditReports.Views.CalcField);

}).call(this);
:ET