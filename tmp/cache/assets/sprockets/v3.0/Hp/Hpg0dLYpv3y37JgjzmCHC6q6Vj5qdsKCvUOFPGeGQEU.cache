I"¸(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AuditReports.Views.StructureCard = (function(superClass) {
    extend(StructureCard, superClass);

    function StructureCard() {
      return StructureCard.__super__.constructor.apply(this, arguments);
    }

    StructureCard.prototype.tagName = 'div';

    StructureCard.prototype.className = 'structure__card';

    StructureCard.prototype.template = _.template("<form class=\"structure__form\">\n  <div class=\"row js-name-row\">\n  </div>\n  <a href=\"#\" class=\"structure__details\" data-trigger=\"collapse\">\n    Details\n  </a>\n  <div class=\"collapsible js-fields-section\">\n  </div>\n</form>");

    StructureCard.prototype.initialize = function(options) {
      var ref;
      if (options == null) {
        options = {};
      }
      this.original = (ref = options.original) != null ? ref : true;
      if (this.original) {
        return this.$el.addClass('js-original-structure');
      } else {
        return this.$el.addClass('js-proposed-structure');
      }
    };

    StructureCard.prototype.render = function() {
      var html;
      html = this.template({
        structureLabel: "" + (this.model.get('name'))
      });
      this.$el.html(html);
      this._addNameField();
      if (this.model.get('multiple')) {
        this._addQuantityField();
      }
      this.$fieldsSection = this.$('.js-fields-section');
      this._renderOriginalStructureFields();
      this._renderFields();
      return this.$el;
    };

    StructureCard.prototype._addNameField = function() {
      var nameField;
      nameField = new AuditReports.Views.NameField({
        model: this.model.get('name_field_value')
      });
      return this.$('.js-name-row').append(nameField.render());
    };

    StructureCard.prototype._addQuantityField = function() {
      var quantityField;
      quantityField = new AuditReports.Views.QuantityField({
        original: this.original,
        model: this.model.get('quantity_field_value')
      });
      return this.$('.js-name-row').append(quantityField.render());
    };

    StructureCard.prototype._renderFields = function() {
      var $row, count;
      $row = null;
      count = 0;
      return this.model.get('field_values').each((function(_this) {
        return function(fieldValue, index) {
          var field;
          field = new AuditReports.Views.Field({
            model: fieldValue
          });
          if (count % 2 === 0) {
            $row = $("<div class='row'></div>");
            _this.$fieldsSection.append($row);
          }
          $row.append(field.render());
          return count += 1;
        };
      })(this));
    };

    StructureCard.prototype._renderOriginalStructureFields = function() {
      return this.model.get('original_structure_field_values').each((function(_this) {
        return function(fieldValue) {
          var $row, field, staticField;
          $row = $("<div class='row'></div>");
          _this.$fieldsSection.append($row);
          field = new AuditReports.Views.OriginalStructureField({
            model: fieldValue
          });
          $row.append(field.render());
          staticField = new AuditReports.Views.EffectiveStructureField({
            model: fieldValue,
            name: "Effective " + (fieldValue.get('name'))
          });
          return $row.append(staticField.render());
        };
      })(this));
    };

    return StructureCard;

  })(Backbone.View);

}).call(this);
:ET