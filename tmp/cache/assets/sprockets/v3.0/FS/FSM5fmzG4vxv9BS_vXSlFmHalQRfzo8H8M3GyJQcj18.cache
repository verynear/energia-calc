I"¹(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DisplayReports.Views.Photos = (function(superClass) {
    extend(Photos, superClass);

    function Photos() {
      this.render = bind(this.render, this);
      return Photos.__super__.constructor.apply(this, arguments);
    }

    Photos.prototype.template = _.template("<h4>Cover photo</h4>\n<div class='gallery js-photos'>\n</div>");

    Photos.prototype.initialize = function() {
      return this.initialSetSelected();
    };

    Photos.prototype.render = function() {
      this.$el.append(this.template());
      this.$photos = this.$('.js-photos');
      this.collection.each((function(_this) {
        return function(model) {
          return _this.$photos.append(new DisplayReports.Views.Photo({
            model: model
          }).render());
        };
      })(this));
      return this.$el;
    };

    Photos.prototype.initialSetSelected = function() {
      var photoToSelect, selectedPhotoId;
      selectedPhotoId = this.collection.display_report.get('selected_photo_id');
      if (!selectedPhotoId) {
        return;
      }
      photoToSelect = this.collection.find(function(model) {
        return selectedPhotoId === model.get('id');
      });
      return this.collection.setSelected(photoToSelect);
    };

    return Photos;

  })(Backbone.View);

}).call(this);
:ET