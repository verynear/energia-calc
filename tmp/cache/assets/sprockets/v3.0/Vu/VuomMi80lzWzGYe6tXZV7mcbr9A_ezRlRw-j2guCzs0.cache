I"T(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AuditReports.Views.MeasureSummaryCalculatedValues = (function(superClass) {
    extend(MeasureSummaryCalculatedValues, superClass);

    function MeasureSummaryCalculatedValues() {
      this.render = bind(this.render, this);
      return MeasureSummaryCalculatedValues.__super__.constructor.apply(this, arguments);
    }

    MeasureSummaryCalculatedValues.prototype.className = "row js-calculated-values";

    MeasureSummaryCalculatedValues.prototype.initialize = function() {
      return this.model.on('change', this.render);
    };

    MeasureSummaryCalculatedValues.prototype.calculationTemplate = _.template("<div class=\"data col-auto\"\n     data-measure-calculation='<%= name %>'>\n  <div class=\"data__label\"><%= title %></div>\n  <div class=\"data__value\"><%= value %></div>\n</div>");

    MeasureSummaryCalculatedValues.prototype.render = function() {
      this.$el.html('');
      _(this.model.get('results')).each((function(_this) {
        return function(data) {
          return _this.$el.append(_this.calculationTemplate(data));
        };
      })(this));
      return this.$el;
    };

    return MeasureSummaryCalculatedValues;

  })(Backbone.View);

}).call(this);
:ET