I"1(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DisplayReports.Views.Preview = (function(superClass) {
    extend(Preview, superClass);

    function Preview() {
      return Preview.__super__.constructor.apply(this, arguments);
    }

    Preview.prototype.initialize = function() {
      this.listenTo(this.model, 'change:rendered_html', this.render);
      return this.listenTo(document, 'resize', this._resizePreview);
    };

    Preview.prototype.render = function() {
      this.$el.html(this.model.get('rendered_html'));
      this._resizePreview();
      return this.$el;
    };

    Preview.prototype._resizePreview = function() {
      return this.$el.height($(window).height() - this.$el.offset().top);
    };

    return Preview;

  })(Backbone.View);

}).call(this);
:ET