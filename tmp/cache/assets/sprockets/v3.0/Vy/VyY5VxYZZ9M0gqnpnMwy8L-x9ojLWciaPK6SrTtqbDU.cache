I"â(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AuditReports.Views.MeasureSummary = (function(superClass) {
    extend(MeasureSummary, superClass);

    function MeasureSummary() {
      this.render = bind(this.render, this);
      return MeasureSummary.__super__.constructor.apply(this, arguments);
    }

    MeasureSummary.prototype.className = "js-measure-summary measure__summary";

    MeasureSummary.prototype.template = _.template("<div class=\"measure__summary__title\">\n  Measure Summary\n</div>\n\n<div class=\"js-measure-fields\">\n</div>\n\n<div class=\"measure__summary__section-title\">\n  Overall usage values (before measure)\n</div>\n\n<div class=\"js-usage-values\">\n</div>\n\n<div class=\"measure__summary__section-title\">\n  Calculation results\n</div>");

    MeasureSummary.prototype.render = function() {
      var $row, descriptionField, recommendationField;
      this.$el.html(this.template());
      this.$usageValues = this.$('.js-usage-values');
      this.$measureFieldsRow = this.$('.js-measure-fields');
      this._renderMeasureFields();
      this._renderUsageValues();
      this._renderCalculatedValues();
      $row = $("<div class='row'></div>");
      this.$el.append($row);
      descriptionField = new AuditReports.Views.DescriptionField({
        model: this.model
      });
      $row.append(descriptionField.render());
      recommendationField = new AuditReports.Views.RecommendationField({
        model: this.model
      });
      $row.append(recommendationField.render());
      return this.$el;
    };

    MeasureSummary.prototype._renderCalculatedValues = function() {
      var calculatedValues;
      calculatedValues = new AuditReports.Views.MeasureSummaryCalculatedValues({
        model: this.model
      });
      return this.$el.append(calculatedValues.render());
    };

    MeasureSummary.prototype._renderMeasureFields = function() {
      var $row, count;
      $row = null;
      count = 0;
      return this.model.get('field_values').each((function(_this) {
        return function(fieldValue) {
          var measureField;
          if (count % 4 === 0) {
            $row = $("<div class='row'></div>");
            _this.$measureFieldsRow.append($row);
          }
          measureField = new AuditReports.Views.MeasureField({
            model: fieldValue
          });
          $row.append(measureField.render());
          return count += 1;
        };
      })(this));
    };

    MeasureSummary.prototype._renderUsageValues = function() {
      var $row, count;
      $row = null;
      count = 0;
      return _(this.model.get('before_usage_values')).each((function(_this) {
        return function(options, key) {
          var staticField;
          if (count % 4 === 0) {
            $row = $("<div class='row'></div>");
            _this.$usageValues.append($row);
          }
          staticField = new AuditReports.Views.StaticField({
            name: options.title,
            value: options.value
          }).render();
          $row.append(staticField);
          return count += 1;
        };
      })(this));
    };

    return MeasureSummary;

  })(Backbone.View);

}).call(this);
:ET